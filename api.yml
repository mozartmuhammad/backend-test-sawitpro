# This is the OpenAPI specification for your service. It is used to generate the client code.
# To generate the server code, use the Gradle task `openApiGenerate`. The 
# generated code will be placed in `build/generate-resources/main`.
#
# We will evaluate you based on how well you design your API.
# 1. How well it follows REST principles.
# 2. How easy it is to understand and use.
#
# References
# 1. https://swagger.io/specification/
openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /users/register:
    post:
      summary: Register a new user.
      operationId: userRegister
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Success Response
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users:
    get:
      summary: Get user data.
      operationId: getUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Success Response
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UserResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      summary: Update user data.
      operationId: UpdateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Success Response
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /login:
    post:
      summary: Login.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Test return
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
                
components:
  schemas:
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    RegisterRequest:
      type: object
      required:
        - phone
        - name
        - password
      properties:
        phone:
          type: string
        name:
          type: string
        password:
          type: string
    RegisterResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
    UserResponse:
      type: object
      required:
        - phone
        - name
      properties:
        phone:
          type: string
        name:
          type: string
    LoginRequest:
      type: object
      required:
        - phone
        - password
      properties:
        phone:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      required:
        - id
        - token
      properties:
        id:
          type: integer
          format: int64
        token:
          type: string
    UpdateUserRequest:
      type: object
      required:
        - phone
        - name
      properties:
        phone:
          type: string
        name:
          type: string
    UpdateUserResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64